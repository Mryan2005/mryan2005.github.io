{"meta":{"title":"Mryan2005's Blog","subtitle":"","description":"All Things in it","author":"Mryan2005","url":"https://www.mryan2005.top"},"pages":[{"title":"about","date":"2024-05-12T09:47:39.000Z","updated":"2024-05-13T08:55:20.003Z","comments":true,"path":"about/index.html","permalink":"https://www.mryan2005.top/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2024-05-11T18:57:25.000Z","updated":"2024-05-13T08:55:20.003Z","comments":true,"path":"categories/index.html","permalink":"https://www.mryan2005.top/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2024-05-11T19:05:08.000Z","updated":"2024-05-13T08:55:20.003Z","comments":true,"path":"friends/index.html","permalink":"https://www.mryan2005.top/friends/index.html","excerpt":"","text":"我的书籍 数据结构与算法大全 C++ Language C Language"},{"title":"标签","date":"2024-05-11T18:57:30.000Z","updated":"2024-05-13T08:55:20.003Z","comments":true,"path":"tags/index.html","permalink":"https://www.mryan2005.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"我为什么要创建我的博客","slug":"the_reason_why_I_create_my_blog","date":"2024-05-13T08:55:20.003Z","updated":"2024-05-13T08:55:20.003Z","comments":true,"path":"2024/05/13/the_reason_why_I_create_my_blog/","permalink":"https://www.mryan2005.top/2024/05/13/the_reason_why_I_create_my_blog/","excerpt":"","text":"其实，我们都知道计算机界的大佬都是有一个属于自己的博客，并且他们的博客都是自己搭建的。这是因为他们知道，一个人的知识是有限的，而一个团队的知识是无限的。所以，他们会把自己的知识分享出来，让更多的人来帮助他们完善自己的知识体系。 我的梦想就是成为一个计算机界的大佬，所以我也要创建一个自己的博客，来记录自己的学习历程，分享自己的知识。 这让我想起了我在我的高中的数学老师的QQ说说的下面的对于“冒险的梦想”的回复： 我想成为想要我的计算机的学识与Linus Torvalds相当的人。 我想，这就是我为什么要创建我的博客的原因吧。 我会在这里发表我对计算机的知识的整理，其实，也不只是计算机的知识，我还会发表我对于其他领域的知识的整理。希望我的博客能够帮助到你。 最后，伴随着这首歌，我大喊着“向顶峰奔去”。","categories":[{"name":"碎碎念","slug":"碎碎念","permalink":"https://www.mryan2005.top/categories/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"}],"tags":[{"name":"碎碎念","slug":"碎碎念","permalink":"https://www.mryan2005.top/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"}]},{"title":"线性表入门","slug":"ds-linearList-1","date":"2024-05-12T15:00:51.000Z","updated":"2024-05-13T08:55:20.003Z","comments":true,"path":"2024/05/12/ds-linearList-1/","permalink":"https://www.mryan2005.top/2024/05/12/ds-linearList-1/","excerpt":"","text":"定义 线性表（linear list）有以下三个规则： 存在唯一的一个“第一个”数据元素 存在唯一的一个“最后一个”数据元素 除“第一个”和“最后一个”元素均只有一个直接前驱（immediate predecessor）和一个直接后继（immediate successor）。 一些参数 线性表长度为n，也可以直接用xxLen表示 当n=0时，就是空表 a的下表i表示的是a(i)在线性表的位序 一些要说的东西 对于线性表存在两种输入的情况： 不修改内容，只是把内容传入，如List L 譬如，getLength(List L) 可修改内容，也可把内容传入，就传地址（指针），如List *L 譬如，initList(List *L) 但是，在此后要访问这指针的内容要用到L-&gt; 但是，我们要注意的是结构体。 举个例子 这是一个动态分配 12345typedef struct &#123; ElemType *data; int length; int listSize;&#125; DA; 注意，如果我们要修改结构体变量的内容（即data、length、listSize），那就直接传地址，如果我们只是读取，那就传变量即可。 譬如，我们的读取函数 123void readDA(DA da) &#123; for(int i = 0; i &lt; da.length; i++) printf(&quot;%d&quot;, da.data[i]);&#125; 这就是直接传变量本身。 如果们要对该变量本身进行一系列的修改的时候，下面的增加函数代码 12345void addContent(DA *da, ElemType content) &#123; ElemType *p = da-&gt;data+da-&gt;length; *p = content; da-&gt;length++;&#125; 这就是直接传地址的。 参考资料 数据结构（C语言版）| 作者：严蔚敏女士","categories":[{"name":"数据结构与算法大全","slug":"数据结构与算法大全","permalink":"https://www.mryan2005.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%A4%A7%E5%85%A8/"}],"tags":[{"name":"第一版","slug":"第一版","permalink":"https://www.mryan2005.top/tags/%E7%AC%AC%E4%B8%80%E7%89%88/"},{"name":"线性表","slug":"线性表","permalink":"https://www.mryan2005.top/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"}]},{"title":"算法的基础知识","slug":"ds-algorithm","date":"2024-05-12T10:51:11.000Z","updated":"2024-05-13T08:55:20.003Z","comments":true,"path":"2024/05/12/ds-algorithm/","permalink":"https://www.mryan2005.top/2024/05/12/ds-algorithm/","excerpt":"","text":"算法的五大特性 确定性 有穷性 可行性 输入和输出（可以没有输入，但是得要有输出） 辨析 程序是不是算法？ 答案是False，因为程序可以没有输入。 算法的要求 正确性（correctness） 可读性（readability） 健壮性（robustness） 效率与低储存量需求 算法的书写 我们要把它写成一个函数。 声明行由返回值类型（int、char、double、float、void、long int）、函数名称和形式参数声明区构成 123456returnValueType functionName(type1 value1;type2 value2) &#123; command 1; command 2; …… command n;&#125; 如果没有声明行，那一定要原型声明，如果不进行原型声明，就有可能造成C语言去猜测变量。 如果输入参数与定义的不匹配，那么会发生变量类型转换。 当然如果你把要声明的函数放到main函数的前面或者是放到头文件当中就不会需要声明行了。 总之，要知道，我们要用到函数来表示一个算法。譬如，我们要从顺序表（从零号位开始存数据，里面的数值都大于等于0）中返回指定位置的值： 1234567891011/*#define maxSize 100 typedef struct &#123; elementType data[maxSize]; int length;&#125;;*/elementType initAlist(seqList *L, int i) &#123; if(i &gt; L-&gt;length) return -1; return L-&gt;data[i-1];&#125; 至于顺序表是什么，为什么要特别声明是从0号位开始，我们以后再说。 不过，在这里形式参数声明区代表的是要输入的值的区域，函数名称得表达出算法的用途，实在不行可以随意。 算法的衡量标准 即时间复杂度（time complexity）和空间复杂度（space complexity）。 时间复杂度（time complexity） 又分为事前估计和事后估计 事前估计 语句频度 顺序结构、分支结构、循环结构——运行次数会有变化，取最大的运行次数。 渐进时间复杂度（asymptotic time complexity） T(n) = O(f(n))，渐进时间复杂度。 主要是要找到关键操作（递归和循环），就是嵌套最深的语句，可以是判断、也可以是普通语句。 当存在最好和最坏情况后，用平均复杂度。 例题 1 多重循环 一重循环 事后统计 利用计算机的计时工具，用一组或多组数据去测。缺点是要运行程序，还会依赖于硬件、软件等因素。 空间复杂度（space complexity） 算法本身会占用：输入、输出、指令、常数、变量等。 看看弄出了多少空间被占用。 注意：如果是递归的算法，那就是看层数，不是看节点数，因为递归算法是单线程的弄完一个以后，就会删除掉。 参考资料 详解时间复杂度计算公式(附例题细致讲解过程) 数据结构（C语言版）| 作者：严蔚敏女士","categories":[{"name":"数据结构与算法大全","slug":"数据结构与算法大全","permalink":"https://www.mryan2005.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%A4%A7%E5%85%A8/"}],"tags":[{"name":"第一版","slug":"第一版","permalink":"https://www.mryan2005.top/tags/%E7%AC%AC%E4%B8%80%E7%89%88/"},{"name":"算法","slug":"算法","permalink":"https://www.mryan2005.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"数据的基本概念","slug":"ds-data","date":"2024-05-11T23:02:32.000Z","updated":"2024-05-13T08:55:20.003Z","comments":true,"path":"2024/05/11/ds-data/","permalink":"https://www.mryan2005.top/2024/05/11/ds-data/","excerpt":"","text":"数据（data） 能输入到计算机当中的并能被处理的符号的总称。 数据元素（data item） 数据的基本单位，通常是以一个整体去考虑，有若干个数据项组成，又名记录。 在计算机当中，最小的储存单位是位（bit），就是二进制数的一位。将若干个位组合起来连成一个位串表示一个数据元素，通常这个位串为一个元素（element）或结点（node），有时可以看成是数据元素在计算机中的映像。 当数据元素组成各个数据项时，位串应于各个数据项的子串称为数据域（data field） 数据对象（data object） 性质相同的数据元素的集合，是数据的子集。 数据结构（data structure） 存在一种或一种以上的特殊关系的数据元素的集合——Data_Structure = (D,S) D是数据元素的有限集，S是D上关系的有限集 数据结构通常分为4种基本结构： 集合 线性 树 图 数据结构在计算机的表示成为数据的物理结构（physical structure），又称为储存结构（storage structure），同时，这也包括了数据元素的表示和关系的表示。 数据项（data element） 数据的最小单位 数据类型（data type） 用于刻画操作对象的特性：譬如，整型数据可以进行加减乘除，字符型的只能进行加减 两大分类： 原子类型，譬如：C语言中的整型、浮点型、字符型、枚举型 结构类型：若干个数据类型组成（可以是结构的、也可以是非结构的） 抽象数据类型 [ ADT ]（abstract data type） 分为两种类型： 原子类型 结构类型 固定聚合类型，“值”确定的 可变聚合类型，“值”的成分不确定 定义上分为三个部分：数据对象（data object）、数据关系（data relation）、基本操作。 数据的关系描述的是数据元素之间的逻辑关系，由此被称为逻辑关系（logical structure）。 数据关系在计算机的储存方法有两种： 顺序映像 非顺序映像 同时，也有两种储存结构： 顺序储存结构（sequential storage structure） 链式储存结构（linked storage structure） 参考资料 数据结构（C语言版）| 作者：严蔚敏女士","categories":[{"name":"数据结构与算法大全","slug":"数据结构与算法大全","permalink":"https://www.mryan2005.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%A4%A7%E5%85%A8/"}],"tags":[{"name":"第一版","slug":"第一版","permalink":"https://www.mryan2005.top/tags/%E7%AC%AC%E4%B8%80%E7%89%88/"}]},{"title":"作者有话说","slug":"ds-author-went-to-say","date":"2024-05-11T22:58:51.000Z","updated":"2024-05-13T08:55:20.003Z","comments":true,"path":"2024/05/11/ds-author-went-to-say/","permalink":"https://www.mryan2005.top/2024/05/11/ds-author-went-to-say/","excerpt":"","text":"我依稀记得，小时候的我，便与计算机结下了不解之缘。那时的我，对计算机充满了好奇，总是想要探索这个神奇的小盒子里的奥秘。每次坐在电脑前，我都会瞪大眼睛，仔细观察屏幕上的每一个图标，尝试着去理解它们的功能和用途。 随着时间的推移，我逐渐对计算机产生了热爱之情。我开始沉迷于计算机的命令行，那些看似复杂的指令和代码，在我眼中却充满了魅力。我喜欢通过命令行来控制计算机，完成各种任务，那种掌控感让我兴奋不已。我开始研究各种计算机知识，从硬件到软件，从操作系统到编程语言，我都想要了解得更多。 在小学五年级的时候，我第一次接触到了C语言。那时的我，满怀激情地投入到学习中，想要掌握这门强大的编程语言。然而，现实却给我泼了一盆冷水。我发现，我所使用的书籍中充满了错误，这让我感到十分沮丧。最终，我无奈地选择了放弃，转而寻找其他更适合我的编程语言。 初中的时候，我接触到了Python。与C语言相比，Python的语法更加简洁易懂，让我越用越得心应手。我开始用Python编写各种小程序，解决实际问题。我喜欢Python的灵活性和强大性，它让我感受到了编程的乐趣。 在填报高考志愿时，我坚决地选择了计算机专业，不顾家人的阻拦。他们总是以我那高考成绩只够上二本末的堂哥为例子，试图说服我放弃这个选择。然而，我深知自己的兴趣和优势所在，我坚信自己能够在计算机专业中取得好成绩。最终，我成功地进入了大学，开始了我的计算机学习之旅。 在上海的校园里，我遇到了一些同样是学计算机的同学。他们中有些人总是喜欢在我面前炫耀自己的成绩和成就，搞些所谓的“凡尔赛”。然而，我对此却甚为厌恶。我深知，真正的进步和成就不是靠炫耀得来的，而是需要脚踏实地地学习和实践。因此，我选择了超越他们，用自己的努力和成果来证明自己的实力。我坚信，只要我坚持不懈地努力下去，我一定能够在计算机领域取得属于自己的辉煌成就。 在未来的日子里，我将会继续深耕计算机领域，不断提升自己的技能和知识。无论是面对复杂的算法问题，还是应对日新月异的科技变革，我都会保持一颗求知的心，勇于挑战自我，不断超越极限。 或许，我会遇到更多的困难和挑战，但我相信，只要我坚定信念，勇往直前，就一定能够克服一切难关，实现自己的梦想。我期待着在计算机的世界里，书写属于自己的精彩篇章，用智慧和汗水创造出更多的可能。 回首过去，我为自己的选择和坚持感到自豪。展望未来，我充满了信心和期待。我相信，在不久的将来，我将成为一名优秀的计算机专业人才，为社会的进步和发展贡献自己的力量。","categories":[{"name":"数据结构与算法大全","slug":"数据结构与算法大全","permalink":"https://www.mryan2005.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%A4%A7%E5%85%A8/"}],"tags":[{"name":"第一版","slug":"第一版","permalink":"https://www.mryan2005.top/tags/%E7%AC%AC%E4%B8%80%E7%89%88/"}]},{"title":"序言","slug":"dsxuyan","date":"2024-05-11T21:34:37.000Z","updated":"2024-05-13T08:55:20.003Z","comments":true,"path":"2024/05/11/dsxuyan/","permalink":"https://www.mryan2005.top/2024/05/11/dsxuyan/","excerpt":"","text":"在浩瀚的计算机科学领域中，数据结构与算法无疑是其中最璀璨夺目的明珠。然而，想要真正掌握这门学科，却并非一撮而就的易事。它需要我们有足够的耐心，去一步步探寻每一个细节；它需要我们有足够的毅力，去克服每一个难关。因此，学习数据结构与算法，更像是一场循序渐进的修行，需要我们在实践中不断积累、反思与提升。 本书《数据结构与算法大全》正是基于这样的理念而诞生。它不仅仅是一本简单的教程，更是一部集大成之作。在编写过程中，我们深入研究了各种数据结构与算法的原理、特性及应用场景，力求将最精华、最实用的内容呈现给读者。同时，我们也参考了大量的专业书籍、学术论文以及实际项目经验，以期为读者提供一个全面、深入的学习平台。 在书中，你将看到各种经典的数据结构，如数组、链表、栈、队列、树和图等，以及与之相关的算法实现和优化方法。我们将从基础概念讲起，逐步深入到高级应用和算法设计技巧，让你能够逐步建立起自己的知识体系和技能体系。 此外，本书还注重理论与实践的结合。我们不仅在理论层面详细讲解了数据结构与算法的基本原理和特性，还通过大量的示例和案例，让读者能够更好地理解其在实际问题中的应用。相信通过本书的学习，你不仅能够掌握数据结构与算法的核心知识，还能够将其应用于实际项目中，提升自己的编程能力和问题解决能力。 最后，我要感谢所有为这本书付出努力的人，也要感谢每一位选择阅读这本书的读者。希望它能够成为你学习数据结构与算法的良师益友，陪伴你走过一段充满挑战与收获的学习旅程。愿你在这个领域中不断前行，创造出更加辉煌的未来。","categories":[{"name":"数据结构与算法大全","slug":"数据结构与算法大全","permalink":"https://www.mryan2005.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%A4%A7%E5%85%A8/"}],"tags":[{"name":"第一版","slug":"第一版","permalink":"https://www.mryan2005.top/tags/%E7%AC%AC%E4%B8%80%E7%89%88/"}]},{"title":"随机事件与概率","slug":"suijishijianyugailv","date":"2024-05-11T21:10:06.000Z","updated":"2024-05-13T08:55:20.003Z","comments":true,"path":"2024/05/11/suijishijianyugailv/","permalink":"https://www.mryan2005.top/2024/05/11/suijishijianyugailv/","excerpt":"","text":"确定性现象和不确定性现象 确定性现象 如果在一相同条件下的试验中只会有一种结果出现，这种现象称为确定性现象 不确定性现象 如果在一相同条件下的试验中可能出现多种结果，这种现象称为不确定性现象，也称为随机现象。 例子 抛硬币 掷骰子 抽奖 随机试验 特征 可重复 不确定 可观察 样本空间 随机试验E的所有可能结果组成的集合称为E的样本空间，记为S或Ω。样本空间的元素称为样本点，用ω表示。 分类 离散型的样本空间，以散乱的点表示 连续型的样本空间，以线段表示 随机事件 样本空间S的子集称为随机事件，简称事件。 通常以大写字母A、B、C等表示事件。 只有A中的样本点出现时，称事件A发生，否则称事件A不发生。B、C等事件类似。 例子 做如下随机试验：从整数1~9中随机抽取一个数，则样本空间S={1,2,3,4,5,6,7,8,9}S = \\{1,2,3,4,5,6,7,8,9\\}S={1,2,3,4,5,6,7,8,9} 设事件A表示抽到的数不小于5，即A={5,6,7,8,9}A = \\{5,6,7,8,9\\}A={5,6,7,8,9}。 设事件B表示抽到的是偶数，即B={2,4,6,8}B = \\{2,4,6,8\\}B={2,4,6,8}。 A同学随机抽取的数是2，则我们称事件A没有发生，事件B发生。 B同学随机抽取的数是6，则我们称事件A和B都发生。 C同学随机抽取的数是1，则我们称事件A和B都没有发生。 D同学随机抽取的数是9，则我们称事件A发生，事件B没有发生。 必然事件 一定会发生的事件称为必然事件。也就是这一事件包含所有的样本点。 不可能事件 一定不会发生的事件称为不可能事件。也就是这一事件不包含任何样本点，为空集。 包含关系与相等关系 包含关系 如果属于A的样本点必属于B，则称事件B包含事件A，或称事件A被包含于事件B，记为A⊂B，或B⊃A。 事件A 发生必然导致事件B发生。 相等关系 如果A⊂B且B⊂A，则称事件A与事件B相等，记为A=B。 事件A发生等价于事件B发生。 和（并）运算 由属于事件A或属于事件B的样本点组成的新事件称为事件A与事件B的和事件，记为A⋃B或A+B。 事件A发生或事件B发生，即事件A与事件B中至少有一事件发生。 积（交）运算 由属于事件A且属于事件B的样本点组成的新事件称为事件A与事件B的积事件，记为A⋂B或AB。 事件A发生且事件B发生，即事件A与事件B同时发生。 差运算 由属于事件A且不属于事件B的样本点组成的新事件称为事件A与事件B的差事件，记为A-B。 事件A发生且事件B不发生。 对立事件、互不相容（互斥事件）、独立事件 感觉解释这样的东西，只能用人际交往的方式来解释。 对立事件 事件A的对立事件记为A‾\\overline{A}A，即A‾=S−A\\overline{A} = S - AA=S−A。 一句话，我们两没办法处了，“你出现”的事件发生，“我出现”的事件就不发生，反之亦然。（我怎么写也是刚好气头上想出来的，别往心里去） 互不相容事件（互斥事件） 两者之间没有交集，即A⋂B=∅A⋂B = \\emptysetA⋂B=∅。 这像不像你跟一些人的思想，无论怎么谈，都谈不到一块去。 独立事件 A事件的发生不影响B事件的发生，B事件的发生不影响A事件的发生。 符合P(AB)=P(A)P(B)P(AB) = P(A)P(B)P(AB)=P(A)P(B)的事件称为独立事件。 注意：P(A‾B‾)=P(A‾)P(B‾)P(\\overline{A}\\overline{B}) = P(\\overline{A})P(\\overline{B})P(AB)=P(A)P(B)也成立。 事件的运算律 交换律：A⋃B=B⋃AA⋃B = B⋃AA⋃B=B⋃A，AB=BAAB = BAAB=BA 结合律：(A⋃B)⋃C=A⋃(B⋃C)(A⋃B)⋃C = A⋃(B⋃C)(A⋃B)⋃C=A⋃(B⋃C)，(AB)C=A(BC)(AB)C = A(BC)(AB)C=A(BC) 分配律：A(B⋃C)=AB⋃ACA(B⋃C) = AB⋃ACA(B⋃C)=AB⋃AC，A⋃(BC)=(A⋃B)(A⋃C)A⋃(BC) = (A⋃B)(A⋃C)A⋃(BC)=(A⋃B)(A⋃C) 对偶律：A⋃B‾=A‾⋂B‾\\overline{A⋃B} = \\overline{A}⋂\\overline{B}A⋃B​=A⋂B，AB‾=A‾⋃B‾\\overline{AB} = \\overline{A}⋃\\overline{B}AB=A⋃B","categories":[{"name":"数学","slug":"数学","permalink":"https://www.mryan2005.top/categories/%E6%95%B0%E5%AD%A6/"},{"name":"概率论与数理统计","slug":"数学/概率论与数理统计","permalink":"https://www.mryan2005.top/categories/%E6%95%B0%E5%AD%A6/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/"}],"tags":[{"name":"第一版","slug":"第一版","permalink":"https://www.mryan2005.top/tags/%E7%AC%AC%E4%B8%80%E7%89%88/"}]},{"title":"test_all_things","slug":"test-all-things","date":"2024-05-11T20:06:44.000Z","updated":"2024-05-13T08:55:20.003Z","comments":true,"path":"2024/05/11/test-all-things/","permalink":"https://www.mryan2005.top/2024/05/11/test-all-things/","excerpt":"","text":"mathjax test INLINE EQUATIONS y=mx+by = mx + by=mx+b MULTI-LINE EQUATIONS evidencei=∑jWijxj+bievidence_{i}=\\sum_{j}W_{ij}x_{j}+b_{i} evidencei​=j∑​Wij​xj​+bi​ code test 12def test(): print(&quot;test&quot;)","categories":[{"name":"test example","slug":"test-example","permalink":"https://www.mryan2005.top/categories/test-example/"}],"tags":[{"name":"test","slug":"test","permalink":"https://www.mryan2005.top/tags/test/"}]}]}