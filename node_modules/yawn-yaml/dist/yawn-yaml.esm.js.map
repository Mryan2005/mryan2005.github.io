{"version":3,"file":"yawn-yaml.esm.js","sources":["../src/index.ts"],"sourcesContent":["'use strict';\n\nimport { compose, serialize } from 'yaml-js';\nimport { load, dump } from 'js-yaml';\nimport {\n  isArray,\n  isString,\n  isObject,\n  isUndefined,\n  isNull,\n  isNumber,\n  isEqual,\n  repeat,\n  each,\n  includes,\n  last,\n} from 'lodash';\n\nconst EOL = '\\n';\n\nconst NULL_TAG = 'tag:yaml.org,2002:null';\nconst STR_TAG = 'tag:yaml.org,2002:str';\nconst INT_TAG = 'tag:yaml.org,2002:int';\nconst FLOAT_TAG = 'tag:yaml.org,2002:float';\nconst MAP_TAG = 'tag:yaml.org,2002:map';\nconst SEQ_TAG = 'tag:yaml.org,2002:seq';\n\nconst SPACE = ' ';\nconst DASH = '-';\n\nexport class YAWNError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.message = message;\n    this.name = 'YAWNError';\n  }\n}\n\ninterface Node {\n  start_mark: { pointer: number; column: number };\n  end_mark: { pointer: number; column: number };\n  value: any;\n  tag: string;\n}\n\n// export default class YAWN {\nexport default class YAWN {\n  yaml: string;\n  constructor(str: string) {\n    if (!isString(str)) {\n      throw new TypeError('str should be a string');\n    }\n\n    this.yaml = str;\n  }\n\n  get json() {\n    return load(this.yaml);\n  }\n\n  set json(newJson: any) {\n    // if json is not changed do nothing\n    if (isEqual(this.json, newJson)) {\n      return;\n    }\n\n    const ast = compose(this.yaml);\n\n    if (isUndefined(newJson)) {\n      this.yaml = '';\n      return;\n    }\n\n    // -------------------------------------------------------------------------\n    // check if entire json is changed\n    // -------------------------------------------------------------------------\n    let newTag = getTag(newJson);\n\n    if (ast.tag !== newTag) {\n      let newYaml = cleanDump(newJson);\n\n      // replace this.yaml value from start to end mark with newYaml if node is\n      // primitive\n      if (!isObject(newJson)) {\n        this.yaml = replacePrimitive(ast, newYaml, this.yaml, 0);\n\n        // if node is not primitive\n      } else {\n        this.yaml = replaceNode(ast, newYaml, this.yaml, 0);\n      }\n\n      return;\n    }\n\n    // -------------------------------------------------------------------------\n    // NULL_TAG, STR_TAG, INT_TAG, FLOAT_TAG\n    // -------------------------------------------------------------------------\n    if (includes([NULL_TAG, STR_TAG, INT_TAG, FLOAT_TAG], ast.tag)) {\n      this.yaml = replacePrimitive(ast, newJson, this.yaml, 0);\n\n      return;\n    }\n\n    // -------------------------------------------------------------------------\n    // MAP_TAG\n    // -------------------------------------------------------------------------\n    if (ast.tag === MAP_TAG) {\n      let json = this.json;\n\n      this.yaml = updateMap(ast, newJson, json, this.yaml, 0);\n    }\n\n    // -------------------------------------------------------------------------\n    // SEQ_TAG\n    // -------------------------------------------------------------------------\n    if (ast.tag === SEQ_TAG) {\n      this.yaml = updateSeq(ast, newJson, this.yaml, 0);\n    }\n\n    // Trim trailing whitespaces\n    this.yaml = this.yaml\n      .split(EOL)\n      .map(line => line.replace(/[ \\t]+$/, ''))\n      .join(EOL);\n  }\n\n  toString() {\n    return this.yaml;\n  }\n\n  toJSON() {\n    return this.json;\n  }\n\n  getRemark(path: string) {\n    const ast = compose(this.yaml);\n    let pathlist = path.split('.');\n    let node = getNode(ast, pathlist);\n    return node && getNodeRemark(node, this.yaml);\n  }\n\n  setRemark(path: string, remark: string) {\n    const ast = compose(this.yaml);\n    let pathlist = path.split('.');\n    let node = getNode(ast, pathlist);\n    return !!node && !!(this.yaml = setNodeRemark(node, remark, this.yaml));\n  }\n}\n\n/*\n * Determines the AST tag of a JSON object\n *\n */\nfunction getTag(json: any) {\n  let tag = null;\n\n  if (isArray(json)) {\n    tag = SEQ_TAG;\n  } else if (isObject(json)) {\n    tag = MAP_TAG;\n  } else if (isNull(json)) {\n    tag = NULL_TAG;\n  } else if (isNumber(json)) {\n    if (json % 10 === 0) {\n      tag = INT_TAG;\n    } else {\n      tag = FLOAT_TAG;\n    }\n  } else if (isString(json)) {\n    tag = STR_TAG;\n  } else {\n    throw new YAWNError('Unknown type');\n  }\n  return tag;\n}\n\n/*\n * Update a sequence with new JSON\n */\nfunction updateSeq(\n  ast: Node,\n  newJson: any[],\n  yaml: string,\n  offset: number\n): string {\n  let values: any[] = load(serialize(ast)) as any[];\n  let min: number = Math.min(values.length, newJson.length);\n  for (let i: number = 0; i < min; i++) {\n    const newYaml: string = changeArrayElement(\n      ast.value[i],\n      cleanDump(newJson[i]),\n      yaml,\n      offset\n    );\n    offset = offset + newYaml.length - yaml.length;\n    yaml = newYaml;\n  }\n\n  if (values.length > min) {\n    for (let i: number = min; i < values.length; i++) {\n      const newYaml: string = removeArrayElement(ast.value[i], yaml, offset);\n      offset = offset + newYaml.length - yaml.length;\n      yaml = newYaml;\n    }\n  } else if (newJson.length > min) {\n    yaml = insertAfterNode(ast, cleanDump(newJson.slice(min)), yaml, offset);\n  }\n\n  return yaml;\n}\n\n/*\n * update a map structure with new values\n */\nfunction updateMap(\n  ast: Node,\n  newJson: any,\n  json: any,\n  yaml: string,\n  offset: number\n) {\n  // look for changes\n  each(ast.value, pair => {\n    let [keyNode, valNode] = pair;\n\n    // node is deleted\n    if (isUndefined(newJson[keyNode.value])) {\n      // TODO: can we use of the methods below?\n      const newYaml =\n        yaml.substr(0, keyNode.start_mark.pointer + offset) +\n        yaml.substring(getNodeEndMark(valNode).pointer + offset);\n      offset = offset + newYaml.length - yaml.length;\n      yaml = newYaml;\n      return;\n    }\n\n    let value = json[keyNode.value];\n    let newValue = newJson[keyNode.value];\n\n    // primitive value has changed\n    if (newValue !== value && !isArray(valNode.value)) {\n      // replace the value node\n      const newYaml = replacePrimitive(valNode, newValue, yaml, offset);\n      offset = offset + newYaml.length - yaml.length;\n      yaml = newYaml;\n      // remove the key/value from newJson so it's not detected as new pair in\n      // later code\n      delete newJson[keyNode.value];\n    }\n\n    // non primitive value has changed\n    if (!isEqual(newValue, value) && isArray(valNode.value)) {\n      // array value has changed\n      if (isArray(newValue)) {\n        // recurse\n        const newYaml = updateSeq(valNode, newValue, yaml, offset);\n        offset = offset + newYaml.length - yaml.length;\n        yaml = newYaml;\n\n        // map value has changed\n      } else {\n        // recurse\n        const newYaml = updateMap(valNode, newValue, value, yaml, offset);\n        offset = offset + newYaml.length - yaml.length;\n        yaml = newYaml;\n\n        // ast = compose(yaml);\n\n        // remove the key/value from newJson so it's not detected as new pair in\n        // later code\n        delete newJson[keyNode.value];\n      }\n    }\n  });\n\n  // look for new items to add\n  each(newJson, (value, key) => {\n    // item is new\n    if (isUndefined(json[key])) {\n      let newValue = cleanDump({ [key]: value });\n\n      const newYaml = insertAfterNode(ast, newValue, yaml, offset);\n      offset = offset + newYaml.length - yaml.length;\n      yaml = newYaml;\n    }\n  });\n\n  return yaml;\n}\n\n/*\n * Place value in node range in yaml string\n */\nfunction replacePrimitive(\n  node: Node,\n  value: unknown,\n  yaml: string,\n  offset: number\n) {\n  return (\n    yaml.substr(0, node.start_mark.pointer + offset) +\n    String(value) +\n    yaml.substring(node.end_mark.pointer + offset)\n  );\n}\n\n/*\n * Place value in node range in yaml string\n */\nfunction replaceNode(node: Node, value: string, yaml: string, offset: number) {\n  let indentedValue = indent(value, node.start_mark.column);\n  let lineStart = node.start_mark.pointer - node.start_mark.column + offset;\n\n  return (\n    yaml.substr(0, lineStart) +\n    indentedValue +\n    yaml.substring(getNodeEndMark(node).pointer + offset)\n  );\n}\n\n/*\n * Place value after node range in yaml string\n */\nfunction insertAfterNode(\n  node: Node,\n  value: string,\n  yaml: string,\n  offset: number\n) {\n  let indentedValue = indent(value, node.start_mark.column);\n\n  return (\n    yaml.substr(0, getNodeEndMark(node).pointer + offset) +\n    EOL +\n    indentedValue +\n    yaml.substring(getNodeEndMark(node).pointer + offset)\n  );\n}\n\n/*\n * Removes a node from array\n */\nfunction removeArrayElement(node: Node, yaml: string, offset: number) {\n  let index = node.start_mark.pointer - node.start_mark.column - 1 + offset;\n\n  return (\n    yaml.substr(0, index) +\n    yaml.substring(getNodeEndMark(node).pointer + offset)\n  );\n}\n\n/*\n * Changes a node from array\n */\nfunction changeArrayElement(\n  node: Node,\n  value: string,\n  yaml: string,\n  offset: number\n): string {\n  let indentedValue = indent(value, node.start_mark.column);\n\n  // find index of DASH(`-`) character for this array\n  let index = node.start_mark.pointer + offset;\n  while (index > 0 && yaml[index] !== DASH) {\n    index--;\n  }\n\n  return (\n    yaml.substr(0, index + 2) +\n    indentedValue.substr(node.start_mark.column) +\n    yaml.substring(getNodeEndMark(node).pointer + offset)\n  );\n}\n\n/*\n * Gets end mark of an AST\n */\nfunction getNodeEndMark(ast: Node): Node['end_mark'] {\n  if (isArray(ast.value) && ast.value.length) {\n    let lastItem = last(ast.value);\n\n    if (isArray(lastItem) && lastItem.length) {\n      return getNodeEndMark(last(lastItem));\n    }\n\n    return getNodeEndMark(lastItem);\n  }\n\n  return ast.end_mark;\n}\n\n/*\n * Indents a string with number of characters\n */\nfunction indent(str: string, depth: number) {\n  return str\n    .split(EOL)\n    .filter(line => line)\n    .map(line => repeat(SPACE, depth) + line)\n    .join(EOL);\n}\n\n/*\n * Dump a value to YAML sting without the trailing new line\n */\nfunction cleanDump(value: any) {\n  let yaml = dump(value).replace(/\\n$/, '');\n\n  if (EOL !== '\\n') {\n    yaml = yaml.replace(/\\n/g, EOL);\n  }\n\n  return yaml;\n}\n\n/*\n * Gets remark of an AST\n */\nfunction getNodeRemark(ast: Node, yaml: string) {\n  let index = getNodeEndMark(ast).pointer;\n  while (index < yaml.length && yaml[index] !== '#' && yaml[index] !== EOL) {\n    ++index;\n  }\n\n  if (EOL === yaml[index] || index === yaml.length) {\n    return '';\n  } else {\n    while (\n      index < yaml.length &&\n      (yaml[index] === '#' || yaml[index] === ' ')\n    ) {\n      ++index;\n    }\n    let end = index;\n    while (end < yaml.length && yaml[end] !== EOL) {\n      ++end;\n    }\n    return yaml.substring(index, end);\n  }\n}\n\n/*\n * Sets remark of an AST\n */\nfunction setNodeRemark(ast: Node, remark: string, yaml: string) {\n  let index = getNodeEndMark(ast).pointer;\n  while (index < yaml.length && yaml[index] !== '#' && yaml[index] !== EOL) {\n    ++index;\n  }\n\n  if (EOL === yaml[index] || index === yaml.length) {\n    return yaml.substr(0, index) + ' # ' + remark + yaml.substring(index);\n  } else {\n    while (\n      index < yaml.length &&\n      (yaml[index] === '#' || yaml[index] === ' ')\n    ) {\n      ++index;\n    }\n    let end = index;\n    while (end < yaml.length && yaml[end] !== EOL) {\n      ++end;\n    }\n    return yaml.substr(0, index) + remark + yaml.substring(end);\n  }\n}\n\n/*\n * Gets node of an AST which path\n */\nfunction getNode(ast: Node, path: string | any[]): Node | undefined {\n  if (path.length) {\n    if (ast.tag === MAP_TAG) {\n      let value = ast.value;\n      for (let i = 0; i < value.length; ++i) {\n        let [keyNode, valNode] = value[i];\n        if (path[0] === keyNode.value) {\n          return getNode(valNode, path.slice(1));\n        }\n      }\n      return undefined;\n    } else if (ast.tag === SEQ_TAG) {\n      return ast.value[path[0]] && getNode(ast.value[path[0]], path.slice(1));\n    }\n  }\n  return ast;\n}\n"],"names":["EOL","NULL_TAG","STR_TAG","INT_TAG","FLOAT_TAG","MAP_TAG","SEQ_TAG","SPACE","DASH","YAWNError","_Error","message","_this","call","name","_inheritsLoose","_wrapNativeSuper","Error","YAWN","str","isString","TypeError","yaml","_proto","prototype","toString","toJSON","json","getRemark","path","ast","compose","pathlist","split","node","getNode","getNodeRemark","setRemark","remark","setNodeRemark","_createClass","key","get","load","set","newJson","isEqual","isUndefined","newTag","getTag","tag","newYaml","cleanDump","isObject","replacePrimitive","replaceNode","includes","updateMap","updateSeq","map","line","replace","join","isArray","isNull","isNumber","offset","values","serialize","min","Math","length","i","changeArrayElement","value","removeArrayElement","insertAfterNode","slice","each","pair","keyNode","valNode","substr","start_mark","pointer","substring","getNodeEndMark","newValue","_cleanDump","String","end_mark","indentedValue","indent","column","lineStart","index","lastItem","last","depth","filter","repeat","dump","end","_value$i","undefined"],"mappings":"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"}